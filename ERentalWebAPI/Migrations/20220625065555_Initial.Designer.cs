// <auto-generated />
using System;
using ERentalWebAPI.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ERentalWebAPI.Migrations
{
    [DbContext(typeof(e_RentalSystemDBContext))]
    [Migration("20220625065555_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ERentalWebAPI.Model.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("CustomerPhone")
                        .HasColumnType("numeric(10,0)");

                    b.Property<string>("Dropupaddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DROPUPAddress");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Pickupaddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PICKUPAddress");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("VendorId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("ERentalWebAPI.Model.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("image");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("ERentalWebAPI.Model.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("CustomerAccountBalance")
                        .HasColumnType("money");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CustomerCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("CustomerPhone")
                        .HasColumnType("numeric(10,0)");

                    b.Property<decimal>("CustomerPincode")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("CustomerState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomerUsername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Customername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Customerpwd")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("VendorId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("ERentalWebAPI.Model.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal?>("BillingAmount")
                        .HasColumnType("money");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeliveryCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("DeliveryPincode")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("DeliveryState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("VendorId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ERentalWebAPI.Model.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short?>("ReorderLevel")
                        .HasColumnType("smallint");

                    b.Property<string>("UnitAvailability")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<short?>("UnitsOnOrder")
                        .HasColumnType("smallint");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VendorId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ERentalWebAPI.Model.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("VendorAccountBalance")
                        .HasColumnType("int");

                    b.Property<string>("VendorAddress")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("VendorCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VendorEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("VendorPhone")
                        .HasColumnType("numeric(10,0)");

                    b.Property<decimal>("VendorPincode")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("VendorState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VendorUsername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Vpwd")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("VendorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("ERentalWebAPI.Model.Booking", b =>
                {
                    b.HasOne("ERentalWebAPI.Model.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Booking_Customer")
                        .IsRequired();

                    b.HasOne("ERentalWebAPI.Model.Product", "Product")
                        .WithMany("Bookings")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Booking_Products")
                        .IsRequired();

                    b.HasOne("ERentalWebAPI.Model.Vendor", "Vendor")
                        .WithMany("Bookings")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_Booking_Vendor")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("ERentalWebAPI.Model.Customer", b =>
                {
                    b.HasOne("ERentalWebAPI.Model.Product", "Product")
                        .WithMany("Customers")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Customer_Products")
                        .IsRequired();

                    b.HasOne("ERentalWebAPI.Model.Vendor", "Vendor")
                        .WithMany("Customers")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_Customer_Vendor")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("ERentalWebAPI.Model.Order", b =>
                {
                    b.HasOne("ERentalWebAPI.Model.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Orders_Customer")
                        .IsRequired();

                    b.HasOne("ERentalWebAPI.Model.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Orders_Products")
                        .IsRequired();

                    b.HasOne("ERentalWebAPI.Model.Vendor", "Vendor")
                        .WithMany("Orders")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_Orders_Vendor")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("ERentalWebAPI.Model.Product", b =>
                {
                    b.HasOne("ERentalWebAPI.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Products_Category")
                        .IsRequired();

                    b.HasOne("ERentalWebAPI.Model.Vendor", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_Products_Vendor")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("ERentalWebAPI.Model.Vendor", b =>
                {
                    b.HasOne("ERentalWebAPI.Model.Category", "Category")
                        .WithMany("Vendors")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Category_Vendor")
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ERentalWebAPI.Model.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("ERentalWebAPI.Model.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ERentalWebAPI.Model.Product", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Customers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ERentalWebAPI.Model.Vendor", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Customers");

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
